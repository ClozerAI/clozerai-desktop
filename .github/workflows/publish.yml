name: Publish

# Required GitHub Secrets:
# For macOS signing and notarization:
#   - APPLE_APP_SPECIFIC_PASSWORD: Apple-specific password for notarization
#   - APPLE_ID: Apple ID for notarization
#   - APPLE_TEAM_ID: Apple Developer Team ID
#   - CSC_LINK: Base64-encoded macOS signing certificate (.p12)
#   - CSC_KEY_PASSWORD: Password for the macOS signing certificate
#
# For Windows signing with SSL.com eSigner:
#   - ES_USERNAME: SSL.com account username
#   - ES_PASSWORD: SSL.com account password
#   - CREDENTIAL_ID: SSL.com code signing certificate credential ID
#   - ES_TOTP_SECRET: SSL.com TOTP secret for 2FA
#
# For publishing releases:
#   - RELEASE_REPO_TOKEN: GitHub token with access to the releases repository

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build

      - name: Build Windows unpacked directory (no installer)
        env:
          GH_TOKEN: ${{ secrets.RELEASE_REPO_TOKEN }}
        run: |
          npm exec electron-builder -- --publish never --win dir

      - name: Sign Windows executables with eSigner
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ES_USERNAME }}
          password: ${{ secrets.ES_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/release/build/win-unpacked/ClozerAI.exe
          output_path: ${{ github.workspace }}/release/build/win-unpacked-signed

      - name: Copy signed executable back
        run: |
          copy "${{ github.workspace }}/release/build/win-unpacked-signed/ClozerAI.exe" "${{ github.workspace }}/release/build/win-unpacked/ClozerAI.exe"

      - name: Rebuild Windows installer from signed executable
        env:
          GH_TOKEN: ${{ secrets.RELEASE_REPO_TOKEN }}
        run: |
          npm exec electron-builder -- --publish never --win --prepackaged ${{ github.workspace }}/release/build/win-unpacked

      - name: Find installer file
        id: find-installer
        shell: powershell
        run: |
          $installerFile = Get-ChildItem -Path "${{ github.workspace }}/release/build/" -Name "ClozerAI Setup *.exe" | Select-Object -First 1
          echo "installer_file=$installerFile" >> $env:GITHUB_OUTPUT
          echo "Found installer file: $installerFile"

      - name: Sign Windows installer with eSigner
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ES_USERNAME }}
          password: ${{ secrets.ES_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/release/build/${{ steps.find-installer.outputs.installer_file }}
          output_path: ${{ github.workspace }}/release/build/signed

      - name: Copy signed installer back
        run: |
          copy "${{ github.workspace }}/release/build/signed/${{ steps.find-installer.outputs.installer_file }}" "${{ github.workspace }}/release/build/"

      - name: Upload Windows artifacts to draft release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_REPO_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          OWNER_REPO="clozerai/clozerai-desktop-releases"
          VERSION=$(node -p "require('./package.json').version")

          # Ensure there is a draft release (create if missing)
          RELEASE_ID=$(gh api repos/$OWNER_REPO/releases --jq '.[] | select(.draft == true) | .id' | head -1 || true)
          if [ -z "${RELEASE_ID:-}" ]; then
            gh release create "v$VERSION" --draft --title "v$VERSION" --repo "$OWNER_REPO"
          fi

          INSTALLER_PATH="${{ github.workspace }}/release/build/${{ steps.find-installer.outputs.installer_file }}"
          BLOCKMAP_PATH="${INSTALLER_PATH}.blockmap"
          LATEST_YML_PATH="${{ github.workspace }}/release/build/latest.yml"

          files=("$INSTALLER_PATH")
          if [ -f "$BLOCKMAP_PATH" ]; then files+=("$BLOCKMAP_PATH"); fi
          if [ -f "$LATEST_YML_PATH" ]; then files+=("$LATEST_YML_PATH"); fi

          gh release upload "v$VERSION" "${files[@]}" --repo "$OWNER_REPO" --clobber

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build

      - name: Build and upload macOS artifacts to draft release
        env:
          # The APPLE_* values are used for auto updates signing
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.RELEASE_REPO_TOKEN }}
        run: |
          npm exec electron-builder -- --publish always --mac

  publish-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Publish draft release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_REPO_TOKEN }}
        run: |
          # Get the latest draft release and publish it
          RELEASE_ID=$(gh api repos/clozerai/clozerai-desktop-releases/releases --jq '.[] | select(.draft == true) | .id' | head -1)
          if [ -n "$RELEASE_ID" ]; then
            # First, publish the draft (remove draft status)
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              repos/clozerai/clozerai-desktop-releases/releases/$RELEASE_ID \
              -f draft=false
            echo "Published release $RELEASE_ID"
            
            # Then, set it as the latest release (separate API call)
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              repos/clozerai/clozerai-desktop-releases/releases/$RELEASE_ID \
              -f make_latest=true
            echo "Set release $RELEASE_ID as latest"
          else
            echo "No draft release found"
          fi
